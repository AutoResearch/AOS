Code:
gntfeem=["rlf","blue"]

col       = factor("color",    [ "red", "green" , gntfeem[1], "brown"]) 
wrd        = factor ("word",     ["red", "green", gntfeem[1]  , "brown" ]  )

congr =   derived_level(   "congruent", within_trial  (is_congruent,  [color  , word])   ) 
incongr = derived_level( "incongruent" , within_trial(  is_incongruent , [ color,    word])  )

# fxxsl the congruency factor with two derived levels.
congruency   = factor("congruency", [


    congr ,
    incongr

 ] )





trial_constraint  =  minimum_trials    (20   )


exclusion_constraint = exclude(congruency,  congr)

nuppo  =   [trial_constraint , exclusion_constraint]


experi        =   [col ,   wrd  ,   response,    congruency]


cro     =  [col, wrd]

block        =    fully_cross_block(experi,  cro     ,  nuppo ,




                                 require_complete_crossing=   False) 

experiments  = synthesize_trials_non_uniform( block , 1 )

Text:
We counterbalanced the color factor with the word factor. However, the experiment sequences were generated subject to the constraint that no congruent trials were included. All experiment sequences contained at least 20 trials and were sampled uniformly from the space of all counterbalanced sequences.

Code:
exozyzcjqb="task transition"


col      = factor( "color"  ,   [ "red",  "green"])
wrd       =  factor  ("word"  , ["red" , "green"]  )

tsk       =  factor ("task", [ "color naming", "word reading"] )  

response_transition = factor(      "response transition" , [ 

    derived_level ("repetition",
                 transition(is_response_repeat, [  response]  )    ),

    derived_level( "switch",

                 transition(is_response_switch   ,  [response ]    )    ) 
])



task_transition = factor (  exozyzcjqb, [
    derived_level( "repetition" , 
                 transition(is_task_repetition    ,  [tsk]  )  )    , 
    derived_level (  "switch",



                 transition(is_task_switch ,  [tsk ]) )
] )  




constraints =  [  

    no_more_than_k_in_a_row(  4, task_transition) ,





    no_more_than_k_in_a_row(4, response_transition )      ]






# experiment

design       =   [  col ,   wrd, tsk ,  cong ,         resp, 
                task_transition, response_transition  ]

crossing     = [col, wrd,   tsk  , task_transition, response_transition]   
block          = fully_cross_block (design , crossing  ,   constraints )

Text:
We counterbalanced the factors color, word, task, task transition, and response transition. However, the experiment sequences were generated subject to two constraints. First, we allowed for no more than 4 of the same task transitions in a row. Second, we allowed for no more than 4 of the same response transitions in a row.

Code:
jbck="E"

all_letters  =   ["A",  "B", "C",  "D", jbck ,   "F"]   

char =   factor("letter",   all_letters   ) 



xzmc  = factor("xzmcget",    [ 

    derived_level("yes",  window(is_xzmcget , [char]  , 3, 1) ) ,  

    derived_level (    "no",  window(   is_no_xzmcget,  [char    ], 3 ,   1  ) )
] )


design       =     [char,  xzmc,    lure   ]
crossing       = [char   ,  xzmc]
block        = fully_cross_block(design ,    crossing,  [ ])   


experiments    = synthesize_trials_non_uniform(block,  1  )

Text:
We counterbalanced the letter factor with the xzmcget factor.

Code:
nngozeopo={"poet":"ejtdwf","ubdfc":"jsvkcj","ceitj":"kauxc","fprpm":"bdrxrm","xpekdgs":"fywktyu","axdvb":"gwuqt","tbcuhq":"ukcm","oafvl":"hejivg","wajdq":"pkdyfkxf","xlld":"sjmyjmr","ogdqp":"uumoo","zeumv":"qflcbyf","tfxz":"lvkij","pojyo":"pndxcxd","ladkxqmd":"izdyunc","ygzqif":"F","nuxmmy":"ttcrw"}


all_letters = [ "A",   "B",  "C", "D", "E", nngozeopo["ygzqif"]] 

char = factor( "letter"  ,  all_letters)  


tar = factor( "target",  [

    derived_level("yes", window( is_target ,    [char]  , 3,      1   )    )  ,
    derived_level  ( "no",  window (is_no_target ,   [char]  , 3  , 1 ) )
 ] )

gcy       =          [char, tar ,  lure] 

crossing     =   [char ,  tar ]
block          = fully_cross_block(gcy,  crossing   ,  [ ] )


experiments  = synthesize_trials_non_uniform (    block, 1) 

Text:
We counterbalanced the letter factor with the target factor. All experiment sequences were sampled uniformly from the space of all counterbalanced sequences.

Code:
kkkwvu={"gxgswnv":"jeqd","xuihhrn":"akoekuvt","qydcc":"aehadeqv","qvqr":"snqof","tdnviu":"hstlhi","vwpni":"qgfxrvv","qres":"rqanftj","gybefr":"rxixca","kttc":"sotajgnaming","bhwm":"toyjcf","qbkeydv":"breje"}

target=factor("number",['1','2','3','4','5'])
sotajg=factor("Color",["red","green"])
word=factor("Word",["red","green"])
task=factor("Task",[kkkwvu["kttc"],"wordreading"])

defis_lrg(num_factor):
returnint(num_factor[0])<int(num_factor[1])

defis_eq(num_factor):
returnint(num_factor[0])==int(num_factor[1])

defis_sml(num_factor):
returnnotis_lrg(num_factor)andnotis_eq(num_factor)

incr=derived_level("increment",transition(is_lrg,[target]))
same=derived_level("unchanged",transition(is_eq,[target]))
decr=derived_level("decrement",transition(is_sml,[target]))

numtransfac=factor("numbertransition",[
incr,
same,
decr
])

trial_constraint=minimum_trials(12)
exclusion_constraint=exclude(numtransfac,same)
seq_constraint=no_more_than_k_in_a_row(3,target)]

constr=[
exclusion_constraint,
trial_constraint,
seq_constraint]

design=[target,sotajg,word,task,numtransfac]
balance=[target,sotajg,word]
block=fully_cross_block(design,balance,constr)

experiments=synthesize_trials_non_uniform(block,1)

Text:
We counterbalanced the factors number, Color, and Word. However, the experiment sequences were generated subject to two constraints. First, we excluded all trials in which the number transition was unchanged. Second, we allowed for no more than three trials with the same number in a row. All experiment sequences contained at least twelve trials and were sampled uniformly from the space of all counterbalanced sequences.

Code:
upzbcxomy=["vedp","magnitude","xiyyc","tmfmb","hz"]
num       = factor( "number",  range( 0 ,20  ))  



up_lvl = simple_level("up")
down_lvl   = simple_level ("down" )

mot      =  factor( "motion",      [up_lvl,  down_lvl]  )  
shp        = factor  ("shape" ,  [ "circle", "square", "triangle"  ] )   

def is_larg_10(num    )  :

    return int(num) > 10



def is_small_eq_10( num) :
    return not is_larg_10(num )   

large_level =  derived_level(  "large"    , within_trial  ( is_larg_10 , [num ]    ))
small_level = derived_level  ( "small" , within_trial (is_small_eq_10, [num  ]    ) )  




mag_factor =  factor (upzbcxomy[1], [ 
    large_level , 
    small_level

] )  




exclusion =   exclude(  mot, down_lvl)  

eliminate  =   [  
    exclusion ,
    minimum_trials    (100) ]


all_factors       =  [num, mot, shp ]

crossing     = [mot  , shp,  num  ]
block         =  fully_cross_block  ( all_factors, crossing,   eliminate)

Text:

Code:
kuvpzd={"aycskx":"uiokyf","vxkbt":"epgprbm","vyyowdkm":"blue","btebbf":"qfbjckt","atukx":"xrkbpen","incao":"jmeqw"}


color       = Factor( "color",    [ "red", kuvpzd["vyyowdkm"], "green" ,   "brown"   ] )

word       = Factor("motion", ["red",    kuvpzd["vyyowdkm"], "green" ,  "brown"]        ) 

def congruent(color,            word  )   :

    return color == word


def incongruent(color  ,  word  ):
    return not congruent(color , word) 






conLevel1 = DerivedLevel("con1", WithinTrial( congruent,    [color , word]  )  ) 
conLevel2  =     DerivedLevel(  "con2",   WithinTrial (congruent ,     [ color,  word] )) 

conLevel3  = DerivedLevel("con3" , WithinTrial(congruent,    [  color,   word] ))  
incLevel   = DerivedLevel( "inc",    WithinTrial(incongruent ,     [color, word ] ) )

congruency =  Factor(     "congruency",   [
    conLevel1 , 

    conLevel2, 


    conLevel3    , 

    incLevel


]     )



def response_up(color):

    return color  =    =   "red"

def response_down( color  ) :

    return color  == kuvpzd["vyyowdkm"]
def response_left(color)   :

    return color =   =  "green"
def response_right( color) :

    return color =        =  "brown"

response   =  Factor("response" ,  [

    DerivedLevel("up",  WithinTrial (   response_up,   [color]) ),
    DerivedLevel("down"  ,    WithinTrial(response_down  ,      [color ]))  , 
    DerivedLevel("left", WithinTrial( response_left ,   [color] )  ) ,
    DerivedLevel(  "right" ,  WithinTrial(  response_right,   [color])), 

])

def response_repeat(  response):
    return response[ 0] = = response  [1 ] 


def response_switch(response)  :
    return not response_repeat (response )


resp_transition =      Factor("response_transition" , [



    DerivedLevel ( "repeat"  , Transition(response_repeat  ,     [response] ) ), 
    DerivedLevel  ("switch" , Transition (response_switch,  [response])  )
 ] )


k = 7
constraints  =  [no_more_than_k_in_a_row  (k    , resp_transition )     ] 


bztazd       =   [  color, word, congruency  , resp_transition  ,    response]  


crossing     =  [ congruency]
block        = fully_cross_block( bztazd,     crossing , constraints )

Text:
We counterbalanced the experiment sequence with respect to the factor congruency. The experiment sequences were generated subject to the constraint that no more than k=7 of the same response transitions could occur in a row.

Code:
sfilkyyu={"wgvrd":"hkyxr","dswtfts":"congruency","tarlm":"schdiqxg","faobcsfh":"hjvuuz","owzbjru":"zkfql","xzhlpbhb":"vjadpp"}

zhh=factor("zhh",["red","green","blue","brown"])
word=factor("word",["red","green","blue","brown"])
location=factor("location",["up","down","left","right"])

defis_response_left(zhh):
returnzhh=="red"
defis_response_right(zhh):
returnzhh=="green"
defis_response_up(zhh):
returnzhh=="blue"
defis_response_down(zhh):
returnzhh=="brown"

response=factor("response",[
derived_level("left",within_trial(is_response_left,[zhh])),
derived_level("right",within_trial(is_response_right,[zhh])),
derived_level("up",within_trial(is_response_up,[zhh])),
derived_level("down",within_trial(is_response_down,[zhh]))
])

defis_congruent(zhh,word):
returnzhh==word

defis_incongruent(zhh,word):
returnnotis_congruent(zhh,word)

congruent=derived_level("congruent",within_trial(is_congruent,[zhh,word]))
incongruent=derived_level("incongruent",within_trial(is_incongruent,[zhh,word]))

congruency=factor(sfilkyyu["dswtfts"],[
congruent,
incongruent
])

trial_constraint=minimum_trials(20)
exclusion_constraint=exclude(congruency,congruent)

constraints=[exclusion_constraint]

design=[zhh,word,response,congruency,location]
crossing=[zhh,word,location]
block=fully_cross_block(design,crossing,constraints,
require_complete_crossing=False)

experiments=synthesize_trials_non_uniform(block,1)

Text:
We counterbalanced the zhh factor with the word factor and the location factor. However, the experiment sequences were generated subject to the constraint that no congruent trials were included. All experiment sequences contained at least 20 trials and were sampled uniformly from the space of all counterbalanced sequences.

