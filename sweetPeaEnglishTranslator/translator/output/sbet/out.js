jsPsych = initJsPsych();
trials = [
{timeline: [{type: jsPsychHtmlKeyboardResponse,trial_duration: "500",stimulus: "<div>+</div>",response_ends_trial: false},{type: jsPsychHtmlKeyboardResponse,trial_duration: "1500",stimulus: () => { return "<div style='color: " + jsPsych.timelineVariable('color') + "'>" +jsPsych.timelineVariable('word') + '</div>'},choices: ['c', 'n'],on_finish: (data) => {data["correct"] = jsPsych.timelineVariable('correct') == data["response"]}},{type: jsPsychHtmlKeyboardResponse,trial_duration: () => {let last_trial_correct = jsPsych.data.get().last(1).values()[0].correct;if ((false&& last_trial_correct) || !last_trial_correct) {return "1500"} else {return 0}},stimulus: () => {let last_trial_correct = jsPsych.data.get().last(1).values()[0].correct;if (last_trial_correct) {if (false){if ("message" == "message"){return "<div class='feedback'>Correct!</div>";} else if ("message" == "screen"){return "<div class='feedback-screen-green'></div>";}} else {return ""}} else {let last_trial_response = jsPsych.data.get().last(1).values()[0].response;if (last_trial_response) {if ("message" == "message"){return "<div class='feedback'>Wrong!</div>";} else if ("message" == "screen"){return "<div class='feedback-screen-red'></div>";}} else {if ("message" == "message"){return "<div class='feedback'>Too slow!</div>";} else if ("message" == "screen"){return "<div class='feedback-screen-red'></div>";}}}},response_ends_trial: false},{type: jsPsychHtmlKeyboardResponse,trial_duration: "1500",stimulus: "",response_ends_trial: () => {if (""){ return true;} else {return true;}},choices: [],on_finish: (data) => {data["correct"] = "" == data["response"]}}], timeline_variables: [{'color': 'green', 'word': 'green', 'congruency': 'congruent', 'congruency transition': 'null', 'correct': 'n'}, {'color': 'red', 'word': 'green', 'congruency': 'incongruent', 'congruency transition': 'switch', 'correct': 'c'}, {'color': 'green', 'word': 'green', 'congruency': 'congruent', 'congruency transition': 'switch', 'correct': 'n'}, {'color': 'green', 'word': 'red', 'congruency': 'incongruent', 'congruency transition': 'switch', 'correct': 'n'}, {'color': 'red', 'word': 'green', 'congruency': 'incongruent', 'congruency transition': 'repeat', 'correct': 'c'}, {'color': 'green', 'word': 'red', 'congruency': 'incongruent', 'congruency transition': 'repeat', 'correct': 'n'}, {'color': 'red', 'word': 'red', 'congruency': 'congruent', 'congruency transition': 'switch', 'correct': 'c'}, {'color': 'red', 'word': 'red', 'congruency': 'congruent', 'congruency transition': 'repeat', 'correct': 'c'}, {'color': 'green', 'word': 'green', 'congruency': 'congruent', 'congruency transition': 'repeat', 'correct': 'n'}]}]
jsPsych.run(trials)