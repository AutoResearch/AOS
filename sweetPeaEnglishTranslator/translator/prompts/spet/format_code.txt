Unformatted:
object = Factor("object identity", [Level("H", 2), Level("S", 1)])
motion = Factor("motion", [Level("left", 2), Level("right", 3)])
def response_left(object):
    return object == "H"
def response_right(object):
    return object == "S"
response = Factor("correct response", [
    DerivedLevel("left", WithinTrial(response_left, [object])),
    DerivedLevel("right", WithinTrial(response_right, [object])),
])
def compatible(motion, response):
    return motion == response
def incompatible(motion, response):
    return not compatible(motion, response)
conLevel = DerivedLevel("compatible", WithinTrial(compatible, [motion, response]))
incLevel = DerivedLevel("incompatible", WithinTrial(incompatible, [motion, response]))
congruency = Factor("response congruency", [
    conLevel,
    incLevel
])
def congr_repeat(congruency):
    return congruency[0] == congruency[1]
def congr_switch(congruency):
    return not congr_repeat(congruency)
congr_transition = Factor("congruency transition", [
    DerivedLevel("repeat", Transition(congr_repeat, [congruency])),
    DerivedLevel("switch", Transition(congr_switch, [congruency]))
])
constraints = [AtMostKInARow(5, response),
               AtMostKInARow(5, congruency),
               MinimumTrials(100)]
design = [object, motion, congruency, response, congr_transition]
crossing = [object, motion, congr_transition]
block = CrossBlock(design, crossing, constraints)
experiments = synthesize_trials(block, 1)
### END OF EXPERIMENT DESIGN
Formatted:
### REGULAR FACTORS
object = Factor("object identity", [Level("H", 2), Level("S", 1)])
motion = Factor("motion", [Level("left", 2), Level("right", 3)])
### DERIVED FACTORS
##
def response_left(object):
    return object == "H"
def response_right(object):
    return object == "S"
response = Factor("correct response", [
    DerivedLevel("left", WithinTrial(response_left, [object])),
    DerivedLevel("right", WithinTrial(response_right, [object])),
])
##
def compatible(motion, response):
    return motion == response
def incompatible(motion, response):
    return not compatible(motion, response)
conLevel = DerivedLevel("compatible", WithinTrial(compatible, [motion, response]))
incLevel = DerivedLevel("incompatible", WithinTrial(incompatible, [motion, response]))
congruency = Factor("response congruency", [
    conLevel,
    incLevel
])
##
def congr_repeat(congruency):
    return congruency[0] == congruency[1]
def congr_switch(congruency):
    return not congr_repeat(congruency)
congr_transition = Factor("congruency transition", [
    DerivedLevel("repeat", Transition(congr_repeat, [congruency])),
    DerivedLevel("switch", Transition(congr_switch, [congruency]))
])
### EXPERIMENT
constraints = [AtMostKInARow(5, response),
               AtMostKInARow(5, congruency),
               MinimumTrials(100)]
design = [object, motion, congruency, response, congr_transition]
crossing = [object, motion, congr_transition]
block = CrossBlock(design, crossing, constraints)
experiments = synthesize_trials(block, 1)
Unformatted:
object = Factor("object identity",  ["H", "S"])
motion = Factor("motion", ["left", "right"])
def response_left(object):
    return object == "H"
def response_right(object):
    return object == "S"
def compatible(motion, response):
    return motion == response
def incompatible(motion, response):
    return not compatible(motion, response)
response = Factor("correct response", [
    DerivedLevel("left", WithinTrial(response_left,   [object])),
    DerivedLevel("right", WithinTrial(response_right,   [object])),
])
conLevel = DerivedLevel("compatible", WithinTrial(compatible, [motion, response]))
incLevel = DerivedLevel("incompatible", WithinTrial(incompatible, [motion, response]))
congruency = Factor("response congruency", [
    conLevel,
    incLevel
])
def congr_repeat(congruency):
    return congruency[0] == congruency[1]
def congr_switch(congruency):
    return not congr_repeat(congruency)
congr_transition = Factor("congruency transition", [
    DerivedLevel("repeat", Transition(congr_repeat, [congruency])),
    DerivedLevel("switch", Transition(congr_switch, [congruency]))
])
constraints = [AtMostKInARow(5, response),
               AtMostKInARow(5, congruency),
               MinimumTrials(100)]
design = [object, motion, congruency, response, congr_transition]
crossing = [object, motion, congr_transition]
block = CrossBlock(design, crossing, constraints, False)
experiments = synthesize_trials(block, 1)
Formatted:
### REGULAR FACTORS
object = Factor("object identity",  ["H", "S"])
motion = Factor("motion", ["left", "right"])
### DERIVED FACTORS
##
def response_left(object):
    return object == "H"
def response_right(object):
    return object == "S"
response = Factor("correct response", [
    DerivedLevel("left", WithinTrial(response_left,   [object])),
    DerivedLevel("right", WithinTrial(response_right,   [object])),
])
##
def compatible(motion, response):
    return motion == response
def incompatible(motion, response):
    return not compatible(motion, response)
conLevel = DerivedLevel("compatible", WithinTrial(compatible, [motion, response]))
incLevel = DerivedLevel("incompatible", WithinTrial(incompatible, [motion, response]))
congruency = Factor("response congruency", [
    conLevel,
    incLevel
])
##
def congr_repeat(congruency):
    return congruency[0] == congruency[1]
def congr_switch(congruency):
    return not congr_repeat(congruency)
congr_transition = Factor("congruency transition", [
    DerivedLevel("repeat", Transition(congr_repeat, [congruency])),
    DerivedLevel("switch", Transition(congr_switch, [congruency]))
])
### EXPERIMENT
constraints = [AtMostKInARow(5, response),
               AtMostKInARow(5, congruency),
               MinimumTrials(100)]
design = [object, motion, congruency, response, congr_transition]
crossing = [object, motion, congr_transition]
block = CrossBlock(design, crossing, constraints, False)
experiments = synthesize_trials(block, 1)
### END OF EXPERIMENT DESIGN
Unformatted:
constraints = [MinimumTrials(103)]
letter = Factor("letter", ["A", "B", "C", "D", "E", "F"])
def is_1back_lure_yes(letter):
    return letter[-1] == letter[0]
def is_2back_lure_yes(letter):
    return letter[-2] == letter[0]
def is_2back_lure_no(letter):
    return not is_2back_lure_yes(letter)
def is_target_yes(letter):
    return letter[-3] == letter[0]
def is_target_no(letter):
    return not is_target_yes(letter)
def is_1back_lure_no(letter):
    return not is_1back_lure_yes(letter)
target = Factor("target", [
    DerivedLevel("yes", Window(is_target_yes, [letter], 4, 1)),
    DerivedLevel("no", Window(is_target_no, [letter], 4, 1))
])
def is_n_back_lure_yes(letter):
    return letter[-1] == letter[0] or letter[-2] == letter[0]
one_back_lure = Factor("1back lure", [
    DerivedLevel("yes", Window(is_1back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_1back_lure_no, [letter], 3, 1))
])
two_back_lure = Factor("2back lure", [
    DerivedLevel("yes", Window(is_2back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_2back_lure_no, [letter], 3, 1))
])
def is_n_back_lure_no(letter):
    return not is_n_back_lure_yes(letter)
n_back_lure = Factor("n-back lure", [
    DerivedLevel("yes", Window(is_n_back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_n_back_lure_no, [letter], 3, 1))
])
crossing = [target, n_back_lure]
design = [letter, target, one_back_lure, two_back_lure, n_back_lure]
block = CrossBlock(design, crossing, constraints, False)
experiments = synthesize_trials(block, 1)
Formatted:
### REGULAR FACTORS
letter = Factor("letter", ["A", "B", "C", "D", "E", "F"])
### DERIVED FACTORS
##
def is_target_yes(letter):
    return letter[-3] == letter[0]
def is_target_no(letter):
    return not is_target_yes(letter)
target = Factor("target", [
    DerivedLevel("yes", Window(is_target_yes, [letter], 4, 1)),
    DerivedLevel("no", Window(is_target_no, [letter], 4, 1))
])
##
def is_1back_lure_yes(letter):
    return letter[-1] == letter[0]
def is_1back_lure_no(letter):
    return not is_1back_lure_yes(letter)
one_back_lure = Factor("1back lure", [
    DerivedLevel("yes", Window(is_1back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_1back_lure_no, [letter], 3, 1))
])
##
def is_2back_lure_yes(letter):
    return letter[-2] == letter[0]
def is_2back_lure_no(letter):
    return not is_2back_lure_yes(letter)
two_back_lure = Factor("2back lure", [
    DerivedLevel("yes", Window(is_2back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_2back_lure_no, [letter], 3, 1))
])
##
def is_n_back_lure_yes(letter):
    return letter[-2] == letter[0] or letter[-1] == letter[0]
def is_n_back_lure_no(letter):
    return not is_n_back_lure_yes(letter)
n_back_lure = Factor("n-back lure", [
    DerivedLevel("yes", Window(is_n_back_lure_yes, [letter], 3, 1)),
    DerivedLevel("no", Window(is_n_back_lure_no, [letter], 3, 1))
])
### EXPERIMENT
constraints = [MinimumTrials(103)]
crossing = [target, n_back_lure]
design = [letter, target, one_back_lure, two_back_lure, n_back_lure]
block = CrossBlock(design, crossing, constraints, False)
experiments = synthesize_trials(block, 1)
### END OF EXPERIMENT DESIGN
Unformatted: